// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  email      String    @id @unique
  name       String?
  verified   Boolean   @default(false)
  picture    String?
  isAdmin    Boolean   @default(false) // Flag to check if a user is admin

  complaints Complaint[]
  admin      Admin?
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  user      User     @relation(fields: [email], references: [email])
}

model Complaint {
  complaintUID    Int    @id  @default(autoincrement())
  email           String
  issue           String

  user            User      @relation(fields: [email], references: [email])
  complaintAdmins ComplaintAdmin[]
}

model ComplaintAdmin {
  id           Int      @id @default(autoincrement())
  complaintUID Int
  adminId      Int?
  status       ComplaintStatus @default(NOT_VIEWED)
  response     String?

  complaint    Complaint @relation(fields: [complaintUID], references: [complaintUID])

}

enum ComplaintStatus {
  RESOLVED
  PENDING
  NOT_VIEWED
}

/*model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user      User     @relation(references: [email], fields: [userId], onDelete: Cascade)
}

model NotifLogs{
  id       String   @id @default(cuid())
  userId   String
  message  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
}

model AffectedInstance {
  id          String   @id @default(cuid())
  locationId  String   
  reason      String   
  createdAt   DateTime @default(now())

  location    Location @relation(fields: [locationId], references: [id])
}

model Location {
  id           String   @id @default(cuid())
  locationName String   
  status       Boolean
  coordinates  String

  AffectedInstances AffectedInstance[]
}

model UserLocation {
  id          String   @id @default(cuid())
  userId      String 
  location    String
  coordinates String  

  user        User     @relation(fields: [userId], references: [id])
}
*/
